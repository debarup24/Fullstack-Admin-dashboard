import{j as e,H as t,m as a,R as s}from"./index-1qcXHorL.js";const n=()=>e.jsxs("div",{className:"flex-1 overflow-auto relative z-10",children:[e.jsx(t,{title:"On Demand Load"}),e.jsx("main",{className:"max-w-7xl mx-auto py-6 mt-8 px-4 lg:px-8",children:e.jsx(a.div,{className:"bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{delay:.3},children:e.jsx("div",{className:"w-full h-auto",children:e.jsxs(s,{children:[e.jsx("h1",{className:"text-xl",children:" This is Lazy Loading Page!"}),e.jsxs("div",{className:"py-4 px-5 m-2",children:[e.jsx("p",{className:"font-semibold text-lg pt-2 pb-1",children:"1. What is Lazy Loading?"}),e.jsxs("p",{className:"font-light text-sm pb-2.5",children:["Lazy Loading in React is used to initially load and render limited data on the webpage. It helps to optimize the performance of React applications. The data is only rendered when visited or scrolled it can be images, scripts, etc. Lazy loading helps to load the web page quickly and presents the limited content to the user that is needed for the interaction lazy loading can be more helpful in applications that have high-resolution images or data that alters the loading time of the application ",e.jsx("br",{})," In React, Lazy loading is a technique that allows you to load components, modules, or assets asynchronously, improving the loading time of your application. It can be achieved by using the built-in React.lazy() method and Suspense component."]}),e.jsx("p",{className:"font-semibold text-lg pt-1 pb-1",children:"2. How Lazy Loading works?"}),e.jsxs("p",{className:"font-light text-sm pb-2.5 ",children:[" ","- Lazy loading defers the loading of components until they are needed. ",e.jsx("br",{}),"- This reduces the amount of code that needs to be loaded at once. ",e.jsx("br",{}),"- It can help improve the performance of React applications."]}),e.jsx("p",{className:"font-semibold text-lg pt-1 pb-1",children:"3. Benefits of Lazy Loading ?"}),e.jsxs("p",{className:"font-light text-sm pb-2.5 ",children:["- Reduces the initial load time ",e.jsx("br",{}),"- Reduces browser workload ",e.jsx("br",{}),"- Improves application performance in low bandwidth situations ",e.jsx("br",{}),"- Optimizes resource usage ",e.jsx("br",{}),"- Ensures that the app remains responsive and fast, even as it scales"]}),e.jsxs("p",{className:"font-semibold text-lg pt-1 pb-1",children:["4. When to use it"," "]}),e.jsxs("p",{className:"font-light text-sm pb-2.5 ",children:["- When certain code or features will not be accessible to all users ",e.jsx("br",{}),"- When a user does not access code or features frequently ",e.jsx("br",{}),"- When an application has huge content"]}),e.jsx("p",{className:"font-semibold text-lg pt-1 pb-1",children:"5. Approach"}),e.jsxs("p",{className:"font-light text-sm pb-2.5 ",children:["-Firstly, Recognize the component you want to Lazy Load. These are mostly Large or complex which is not necessary for all the users when the page loads. ",e.jsx("br",{}),"- Import the lazy() and Suspense components from the React package ",e.jsx("br",{}),"- Use the lazy() function to dynamically import the component you want to lazy load: Note that the argument to the lazy() function should be a function that returns the result of the import() function. ",e.jsx("br",{}),"- Wrap the lazy-loaded component in a Suspense component, which will display a fallback UI while the component is being loaded:"]})]})]})})})})]});export{n as default};
